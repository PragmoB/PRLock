#include "stdafx.h"
#include "AES.h"
#include <cstring>

static const UCHAR SBOX[256] = {
	// 0     1     2     3     4     5     6     7     8     9     a     b     c     d     e     f
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, // 0
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, // 1
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, // 2
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, // 3
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, // 4
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, // 5
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, // 6
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, // 7
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, // 8
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, // 9
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, // a
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, // b
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, // c
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, // d
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, // e
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16  // f
};

static const UCHAR INVSBOX[256] = {
	// 0     1     2     3     4     5     6     7     8     9     a     b     c     d     e     f
	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, // 0
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, // 1
	0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, // 2
	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, // 3
	0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, // 4
	0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, // 5
	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, // 6
	0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, // 7
	0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, // 8
	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, // 9
	0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, // a
	0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, // b
	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, // c
	0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, // d
	0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, // e
	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d  // f
};

// target을 times번 만큼 쉬프트 연산을 진행함
// times의 부호에 따라 방향이 바뀜(왼쪽 : 음수, 오른쪽 : 양수)
void AES::Shift(UCHAR* target, int times, int length)
{
	if (times >= length)
		return;

	// target = 123456789abcdef이라 하면 왼쪽으로 4번 쉬프트 하는거랑 오른쪽으로 12번 쉬프트 하는거랑 같다
	// 따라서 연산 방향을 오른쪽으로 통일한다.
	// times = -4, length = 16이라 예를 들면 times = 12로 맞춰줘야함
	if (times < 0)
		times = length + times;

	UCHAR* temp1 = new UCHAR[length - times];
	UCHAR* temp2 = new UCHAR[times];

	// temp1 = 1234와 temp2 = 56789abcdef 두 조각으로 토막낸다
	memcpy(temp1, target, length - times);
	memcpy(temp2, target + length - times, times);

	// temp2 + temp1 = 56789abcdef1234로 만든다
	memcpy(target, temp2, times);
	memcpy(target + times, temp1, length - times);

	delete temp1;
	delete temp2;
}

void AES::AddRoundKey(UCHAR* state, const UCHAR* key, int length)
{
	for (int i = 0; i < length; i++)
		state[i] ^= key[i];
}
void AES::SubBytes(UCHAR* state, const UCHAR* S_BOX, int length)
{
	for (int i = 0; i < length; i++)
		state[i] = S_BOX[state[i]];
}
void AES::ShiftRows(UCHAR* state, BOOL inv = false)
{
	UCHAR row[4] = "";
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
			row[j] = state[i + 4 * j];

		if (inv) // 복호화면
			Shift(row, i, 4); // 오른쪽으로 연산해야 하고
		else // 암호화면
			Shift(row, -i, 4); // 왼쪽으로 연산

		for (int j = 0; j < 4; j++)
			state[i + 4 * j] = row[j];
	}
}
void AES::MixColumn(UCHAR * data, size_t data_len)
{
	if ((data_len % 4) != 0)
		return;

	for (size_t i = 0; i < data_len; i += 4) {
		UCHAR copy_arr[4], res[4];

		memcpy(copy_arr, data + i, 4);

		res[0] = (data[0 + i] << 1) ^ (0x1B & ((UCHAR)((signed char)data[0 + i] >> 7)));
		res[1] = (data[1 + i] << 1) ^ (0x1B & ((UCHAR)((signed char)data[1 + i] >> 7)));
		res[2] = (data[2 + i] << 1) ^ (0x1B & ((UCHAR)((signed char)data[2 + i] >> 7)));
		res[3] = (data[3 + i] << 1) ^ (0x1B & ((UCHAR)((signed char)data[3 + i] >> 7)));

		data[0 + i] = res[0] ^ copy_arr[3] ^ copy_arr[2] ^ res[1] ^ copy_arr[1];
		data[1 + i] = res[1] ^ copy_arr[0] ^ copy_arr[3] ^ res[2] ^ copy_arr[2];
		data[2 + i] = res[2] ^ copy_arr[1] ^ copy_arr[0] ^ res[3] ^ copy_arr[3];
		data[3 + i] = res[3] ^ copy_arr[2] ^ copy_arr[1] ^ res[0] ^ copy_arr[0];
	}
}
void AES::InvMixColumn(UCHAR * data, size_t data_len)
{
	if ((data_len % 4) != 0)
		return;

	UCHAR* copy_data = new UCHAR[data_len];
	UCHAR result;

	memcpy(copy_data, data, data_len);
	for (int i = 0; i < data_len; i++)
	{
		data[i] = 0;
		for (int j = 0; j < 4; j++)
		{
			result = copy_data[(i / 4) * 4 + j];

			// 9와 곱셈
			if (((3 + i % 4) % 4) == j)
			{
				result = (result << 1) ^ (0x1B & ((UCHAR)((signed char)result >> 7)));
				result = (result << 1) ^ (0x1B & ((UCHAR)((signed char)result >> 7)));
				result = (result << 1) ^ (0x1B & ((UCHAR)((signed char)result >> 7)));
				result ^= copy_data[(i / 4) * 4 + j];
			}
			// 13과 곱셈
			if (((2 + i % 4) % 4) == j)
			{
				result = (result << 1) ^ (0x1B & ((UCHAR)((signed char)result >> 7)));
				result ^= copy_data[(i / 4) * 4 + j];
				result = (result << 1) ^ (0x1B & ((UCHAR)((signed char)result >> 7)));
				result = (result << 1) ^ (0x1B & ((UCHAR)((signed char)result >> 7)));
				result ^= copy_data[(i / 4) * 4 + j];
			}
			// 11과 곱셈
			if (((1 + i % 4) % 4) == j)
			{
				result = (result << 1) ^ (0x1B & ((UCHAR)((signed char)result >> 7)));
				result = (result << 1) ^ (0x1B & ((UCHAR)((signed char)result >> 7)));
				result ^= copy_data[(i / 4) * 4 + j];
				result = (result << 1) ^ (0x1B & ((UCHAR)((signed char)result >> 7)));
				result ^= copy_data[(i / 4) * 4 + j];
			}
			// 14과 곱셈
			if ((i % 4) == j)
			{
				result = (result << 1) ^ (0x1B & ((UCHAR)((signed char)result >> 7)));
				result ^= copy_data[(i / 4) * 4 + j];
				result = (result << 1) ^ (0x1B & ((UCHAR)((signed char)result >> 7)));
				result ^= copy_data[(i / 4) * 4 + j];
				result = (result << 1) ^ (0x1B & ((UCHAR)((signed char)result >> 7)));
			}
			data[i] ^= result;
		}


	}

	delete copy_data;
}

void AES::KeySchedule(const UCHAR* CipherKey){

	memcpy(RoundKey[0], CipherKey, 16);
	UCHAR row_1[4] = "", row_4[4] = "";
	UCHAR Rcon[] = { 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36 };
		 
	for (int i = 1; i < 11; i++)
	{
		// first row
		memcpy(row_1, &RoundKey[i - 1][12], 4);
		Shift(row_1, -1, 4);

		for (int j = 0; j < 4; j++)
			row_1[j] = SBOX[row_1[j]]; // SubBytes

		memcpy(row_4, RoundKey[i - 1], 4);

		for (int j = 0; j < 4; j++)
			RoundKey[i][j] = row_4[j] ^ row_1[j];

		RoundKey[i][0] ^= Rcon[i - 1];

		// 2, 3 ,4 row
		for (int j = 1; j < 4; j++)
		{
			memcpy(row_4, &RoundKey[i - 1][4 * j], 4);
			memcpy(row_1, &RoundKey[i][4 * (j - 1)], 4);

			for (int k = 0; k < 4; k++)
				RoundKey[i][4 * j + k] = row_4[k] ^ row_1[k];
		}
	}
}


void AES::Encrypt(const UCHAR* source, UCHAR* result)
{
	memcpy(result, source, 16);
	
	// 0라운드
	AddRoundKey(result, RoundKey[0], 16);

	// 1라운드 ~ 9라운드
	for (int i = 1; i <= 9; i++)
	{
		SubBytes(result, SBOX, 16);
		ShiftRows(result, false);
		MixColumn(result, 16);
		AddRoundKey(result, RoundKey[i], 16);
	}

	// 10라운드
	SubBytes(result, SBOX, 16);
	ShiftRows(result, false);
	AddRoundKey(result, RoundKey[10], 16);
}

void AES::Decrypt(const UCHAR* source, UCHAR* result)
{
	memcpy(result, source, 16);
	
	// 10라운드
	AddRoundKey(result, RoundKey[10], 16);
	ShiftRows(result, true);
	SubBytes(result, INVSBOX, 16);

	// 9라운드 ~ 1라운드
	for (int i = 9; i >= 1; i--)
	{
		AddRoundKey(result, RoundKey[i], 16);
		InvMixColumn(result, 16);
		ShiftRows(result, true);
		SubBytes(result, INVSBOX, 16);
	}
	// 0라운드
	AddRoundKey(result, RoundKey[0], 16);
}